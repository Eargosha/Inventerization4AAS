import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:inventerization_4aas/constants/app_constants.dart';
import 'package:inventerization_4aas/models/api_response_model.dart';

class PrinterStatusRepository {
  Future<ApiResponse> printLabel({
    required String name,
    required String productId,
    required String barcode,
    required String rfid,
    required int labelType,
  }) async {
    // –ü—Ä–∏–º–µ—Ä Http –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏:
    // http://10.104.224.75/flutter_api/printer/print_label.php?invNom=INV001&rfid=RFID123&nameTovar=StollMetal&barcode=123456789012&typeOfSticker=1
    final url = Uri.parse(
      '${AppConstants.baseAPIUrl}printer/print_label.php?invNom=$productId&rfid=$rfid&nameTovar=$name&barcode=$barcode&typeOfSticker=$labelType',
    );

    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode != 200) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ HTTP: ${response.statusCode}',
        );
      }

      late Map<String, dynamic> jsonMap;
      try {
        final String rawBody = response.body.trim();

        // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ JSON?
        if (rawBody.isEmpty) {
          return ApiResponse(
            success: false,
            message: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç',
          );
        }

        if (!rawBody.startsWith('{') && !rawBody.startsWith('[')) {
          // –≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ JSON ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, HTML, —Ç–µ–∫—Å—Ç –∏ —Ç.–¥.
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
          final snippet = rawBody.length > 200
              ? '${rawBody.substring(0, 200)}...'
              : rawBody;
          return ApiResponse(
            success: false,
            message:
                '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–∂–∏–¥–∞–ª—Å—è JSON). –û—Ç–≤–µ—Ç: "$snippet"',
          );
        }

        // –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        final jsonMap = json.decode(rawBody) as Map<String, dynamic>;
        return ApiResponse.fromJson(jsonMap);
      } catch (e) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: $e',
        );
      }

      // print('–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—á–∞—Ç–∏: $jsonMap');

      // try {
      //   return ApiResponse.fromJson(jsonMap);
      // } catch (e) {
      //   return ApiResponse(
      //     success: false,
      //     message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: $e',
      //   );
      // }
    } catch (e, stackTrace) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—á–∞—Ç–∏: $e');
      print('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: $stackTrace');
      return ApiResponse(success: false, message: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  Future<ApiResponse> configurePrinter({
    required double labelLength,
    required double labelWidth,
    required bool isFrontAntenna,
    required double antennaX,
    required double antennaY,
    required double powerWrite,
    required double powerRead,
    required double pitchSize,
  }) async {
    final uri1 = Uri.parse(
      '${AppConstants.baseAPIUrl}printer/configure_sato.php?'
      'length=${labelLength}&width=${labelWidth}&antenna-pos=${!isFrontAntenna ? 'NORMAL' : 'FRONT'}',
    );

    final uri2 = Uri.parse(
      '${AppConstants.baseAPIUrl}printer/configure_sato.php?'
      'antenna-x=${antennaX}&antenna-y=${antennaY}&power-write=${powerWrite}&power-read=${powerRead}&pitch-size=${pitchSize}',
    );

    print('URL 1: $uri1');
    print('URL 2: $uri2');

    try {
      final response1 = await http.post(
        uri1,
        headers: {'Content-Type': 'application/json'},
      );
      final response2 = await http.post(
        uri2,
        headers: {'Content-Type': 'application/json'},
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP-—Å—Ç–∞—Ç—É—Å—ã
      if (response1.statusCode != 200) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ HTTP (–∑–∞–ø—Ä–æ—Å 1): ${response1.statusCode}',
        );
      }
      if (response2.statusCode != 200) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ HTTP (–∑–∞–ø—Ä–æ—Å 2): ${response2.statusCode}',
        );
      }

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –ù–ï –°–ß–ò–¢–ê–ï–ú –≠–¢–û –û–®–ò–ë–ö–û–ô
      Map<String, dynamic>? jsonMap1;
      try {
        if (response1.body.trim().isNotEmpty) {
          jsonMap1 = json.decode(response1.body) as Map<String, dynamic>;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON
        print(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç 1 –∫–∞–∫ JSON: $e. –¢–µ–ª–æ: "${response1.body}"',
        );
      }

      Map<String, dynamic>? jsonMap2;
      try {
        if (response2.body.trim().isNotEmpty) {
          jsonMap2 = json.decode(response2.body) as Map<String, dynamic>;
        }
      } catch (e) {
        print(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç 2 –∫–∞–∫ JSON: $e. –¢–µ–ª–æ: "${response2.body}"',
        );
      }

      // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç success=true ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
      bool hasSuccess = false;
      String? message;

      if (jsonMap1 != null) {
        hasSuccess = jsonMap1['success'] == true;
        message = jsonMap1['message'] as String?;
      }
      if (jsonMap2 != null && !hasSuccess) {
        hasSuccess = jsonMap2['success'] == true;
        message ??= jsonMap2['message'] as String?;
      }

      // üîë –ì–ª–∞–≤–Ω–æ–µ: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 200 ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å—ë –û–ö, –¥–∞–∂–µ –±–µ–∑ JSON
      return ApiResponse(
        success: true,
        message:
            message ??
            '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç)',
      );
    } catch (e, stackTrace) {
      print('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: $e');
      print('–°—Ç–µ–∫: $stackTrace');
      return ApiResponse(success: false, message: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  // Future<ApiResponse> configurePrinter({
  //   required double labelLength, // –î–ª–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –º–º
  //   required double labelWidth, // –®–∏—Ä–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –º–º
  //   required bool
  //   isFrontAntenna, // –ü–µ—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–Ω—Ç–µ–Ω–Ω—ã? (true = FRONT, false = NORMAL)
  //   required double antennaX, // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ X –≤ –º–º
  //   required double antennaY, // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ Y –≤ –º–º
  //   required double powerWrite, // –ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ dBm
  //   required double powerRead, // –ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤ dBm
  //   required double pitchSize, // –†–∞–∑–º–µ—Ä —à–∞–≥–∞ –≤ –º–º
  // }) async {
  //   // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  //   final uri = Uri.parse(
  //     '${AppConstants.baseAPIUrl}printer/configure_sato.php?length=${labelLength.toString()}&width=${labelWidth.toString()}&antenna-pos=${!isFrontAntenna ? 'NORMAL' : 'FRONT'}',
  //   );

  //   // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  //   final uri2 = Uri.parse(
  //     '${AppConstants.baseAPIUrl}printer/configure_sato.php?antenna-x=${antennaX.toString()}&antenna-y=${antennaY.toString()}&power-write=${powerWrite.toString()}&power-read=${powerRead.toString()}&pitch-size=${pitchSize.toString()}',
  //   );

  //   // üëá –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  //   print('–ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞ 1 —á–∞—Å—Ç—å: ${uri.toString()}');
  //   print('–ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞ 2 —á–∞—Å—Ç—å: ${uri.toString()}');

  //   try {
  //     final response = await http.post(
  //       uri,
  //       headers: {'Content-Type': 'application/json'},
  //     );

  //     final response2 = await http.post(
  //       uri2,
  //       headers: {'Content-Type': 'application/json'},
  //     );

  //     if (response.statusCode != 200) {
  //       return ApiResponse(
  //         success: false,
  //         message: '–û—à–∏–±–∫–∞ HTTP: ${response.statusCode}',
  //       );
  //     }

  //     if (response2.statusCode != 200) {
  //       return ApiResponse(
  //         success: false,
  //         message: '–û—à–∏–±–∫–∞ HTTP: ${response.statusCode}',
  //       );
  //     }

  //     late Map<String, dynamic> jsonMap;
  //     try {
  //       jsonMap = json.decode(response.body) as Map<String, dynamic>;
  //     } catch (e) {
  //       return ApiResponse(
  //         success: false,
  //         message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: $e',
  //       );
  //     }

  //     late Map<String, dynamic> jsonMap2;
  //     try {
  //       jsonMap2 = json.decode(response2.body) as Map<String, dynamic>;
  //     } catch (e) {
  //       return ApiResponse(
  //         success: false,
  //         message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: $e',
  //       );
  //     }

  //     print('–û—Ç–≤–µ—Ç –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: $jsonMap');
  //     print('–û—Ç–≤–µ—Ç –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ 2: $jsonMap2');

  //     try {
  //       return ApiResponse.fromJson(jsonMap);
  //     } catch (e) {
  //       return ApiResponse(
  //         success: false,
  //         message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: $e',
  //       );
  //     }

  //   } catch (e, stackTrace) {
  //     print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: $e');
  //     print('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: $stackTrace');
  //     return ApiResponse(success: false, message: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: $e');
  //   }
  // }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω–µ—Ç–µ—Ä–∞, –≥–æ—Ç–æ–≤ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–µ—Ç
  Future<ApiResponse> getPrinterStatus() async {
    final url = Uri.parse(
      '${AppConstants.baseAPIUrl}printer/get_sato_net_status.php',
    );

    try {
      final response = await http.get(url);

      if (response.statusCode != 200) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ HTTP: ${response.statusCode}',
        );
      }

      late Map<String, dynamic> jsonMap;
      try {
        jsonMap = json.decode(response.body) as Map<String, dynamic>;
      } catch (e) {
        return ApiResponse(
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: $e',
        );
      }

      print('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $jsonMap');

      try {
        return ApiResponse.fromJson(jsonMap);
      } catch (e) {
        return ApiResponse(
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: $e',
        );
      }
    } catch (e, stackTrace) {
      print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: $e');
      print('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: $stackTrace');
      return ApiResponse(success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: $e');
    }
  }
}
